rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Utility functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      // Check for custom claims first (more secure and faster)
      return isAuthenticated() &&
        (request.auth.token.admin == true ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    function isValidUserData(userData) {
      // Validate common fields
      let isValidBase = userData.keys().hasAll(['email', 'displayName', 'points', 'createdAt', 'language']) &&
                        userData.email is string &&
                        userData.displayName is string &&
                        userData.displayName.trim().size() > 0 &&  // Ensure displayName is not empty
                        userData.displayName.size() <= 50 &&     // Ensure displayName max length
                        userData.points is number &&
                        userData.createdAt is timestamp &&
                        userData.language in ['en', 'ja'];

      // Additional optional fields
      let optionalFields = ['uid', 'phoneNumber', 'lastVisitScan', 'lastQRCheckIn', 'role'];
      let allAllowedFields = ['email', 'displayName', 'points', 'createdAt', 'language', 'uid', 'phoneNumber', 'lastVisitScan', 'lastQRCheckIn', 'role'];
      let hasOnlyAllowedFields = userData.keys().hasOnly(allAllowedFields);

      // Normal users can't set role to admin
      let isValidRole = !(request.auth.token.admin != true && userData.role == 'admin');

      return isValidBase && hasOnlyAllowedFields && isValidRole;
    }

    function isValidUserUpdateData(currentData, newData) {
      // Check allowed fields for update
      let allowedUpdateFields = ['displayName', 'language', 'phoneNumber'];
      let isAdminUpdate = isAdmin() && newData.keys().hasOnly(allowedUpdateFields.concat(['points', 'role']));
      let isOwnerUpdate = isOwner(request.resource.data.uid) && newData.keys().hasOnly(allowedUpdateFields);
      let hasOnlyAllowedUpdateFields = isAdminUpdate || isOwnerUpdate;

      // Validate displayName specifically
      let isValidDisplayName = newData.displayName is string &&
                               newData.displayName.trim().size() > 0 &&
                               newData.displayName.size() <= 50;

      // Validate language
      let isValidLanguage = newData.language is string && newData.language in ['en', 'ja'];

      // Prevent points/role updates by non-admins
      let preventUnauthorizedAdminFields = (!isAdmin() &&
                                           (newData.points != currentData.points || newData.role != currentData.role));
      if (preventUnauthorizedAdminFields) return false;

      return hasOnlyAllowedUpdateFields && isValidDisplayName && isValidLanguage;
    }

    // User profiles
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && request.auth.uid == userId && isValidUserData(request.resource.data);
      allow update: if (isAdmin() || isOwner(userId)) && isValidUserUpdateData(resource.data, request.resource.data);
      allow delete: if isAdmin(); // Only admins can delete user profiles directly from DB
    }

    // Rewards collection
    match /rewards/{rewardId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Redemptions collection
    match /redemptions/{redemptionId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin() || (
        isAuthenticated() &&
        resource.data.userId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isUsed'])
      );
      allow delete: if isAdmin();
    }

    // Points transactions
    match /points_transactions/{transactionId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      allow create: if isAdmin() || (
        isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.type in ['in-store', 'online-order', 'reward-redemption']
      );
      allow update, delete: if isAdmin();
    }

    // Points history - users can read their own, admins can read/write all
    match /points_history/{historyId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      allow write: if isAdmin();
    }

    // Online order codes - admin only
    match /online_order_codes/{codeId} {
      allow read, write: if isAdmin();
      // Special case: validate code function needs to read this
      allow get: if isAuthenticated() && exists(/databases/$(database)/documents/online_order_codes/$(codeId));
    }

    // Unique order codes - admin only
    match /unique_order_codes/{codeId} {
      allow read, write: if isAdmin();
      // Users can validate their own codes
      allow get: if isAuthenticated();
    }

    // Admin-only collections
    match /admin/{document=**} {
      allow read, write: if isAdmin();
    }

    // Delivery coupons - admin only
    match /delivery_coupons/{couponId} {
      allow read, write: if isAdmin();
    }
  }
}
